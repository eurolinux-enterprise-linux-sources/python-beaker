diff -up Beaker-1.3.1/beaker/converters.py.bak Beaker-1.3.1/beaker/converters.py
--- Beaker-1.3.1/beaker/converters.py.bak	2008-02-28 16:02:30.000000000 -0500
+++ Beaker-1.3.1/beaker/converters.py	2010-06-28 20:58:33.032604522 -0400
@@ -1,26 +1,29 @@
-# (c) 2005 Ian Bicking and contributors; written for Paste (http://pythonpaste.org)
-# Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-def asbool(obj):
-    if isinstance(obj, (str, unicode)):
-        obj = obj.strip().lower()
-        if obj in ['true', 'yes', 'on', 'y', 't', '1']:
-            return True
-        elif obj in ['false', 'no', 'off', 'n', 'f', '0']:
-            return False
-        else:
-            raise ValueError(
-                "String is not true/false: %r" % obj)
-    return bool(obj)
+try:
+    from paste.util.converters import asbool, aslist
+except ImportError:
+    # (c) 2005 Ian Bicking and contributors; written for Paste (http://pythonpaste.org)
+    # Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
+    def asbool(obj):
+        if isinstance(obj, (str, unicode)):
+            obj = obj.strip().lower()
+            if obj in ['true', 'yes', 'on', 'y', 't', '1']:
+                return True
+            elif obj in ['false', 'no', 'off', 'n', 'f', '0']:
+                return False
+            else:
+                raise ValueError(
+                    "String is not true/false: %r" % obj)
+        return bool(obj)
 
-def aslist(obj, sep=None, strip=True):
-    if isinstance(obj, (str, unicode)):
-        lst = obj.split(sep)
-        if strip:
-            lst = [v.strip() for v in lst]
-        return lst
-    elif isinstance(obj, (list, tuple)):
-        return obj
-    elif obj is None:
-        return []
-    else:
-        return [obj]
+    def aslist(obj, sep=None, strip=True):
+        if isinstance(obj, (str, unicode)):
+            lst = obj.split(sep)
+            if strip:
+                lst = [v.strip() for v in lst]
+            return lst
+        elif isinstance(obj, (list, tuple)):
+            return obj
+        elif obj is None:
+            return []
+        else:
+            return [obj]
